# CircleCI Configuration File
# This file defines the CI/CD pipeline for your project.
# Make sure to set the following environment variables in your CircleCI project settings:
# GCLOUD_SERVICE_KEY: The base64 encoded service account key for GCP authentication.
# GOOGLE_PROJECT_ID: Your Google Cloud project ID.
# GKE_CLUSTER: The name of your GKE cluster.
# GOOGLE_COMPUTE_REGION: The region of your GKE cluster (e.g., us-central1).

version: 2.1

# Define a reusable executor.
# Using the google/cloud-sdk image which includes gcloud, kubectl, and docker.
executors:
  gcp_executor:
    docker:
      - image: google/cloud-sdk:latest
    working_directory: ~/repo

jobs:
  # Job to build a Docker image and push it to Google Artifact Registry.
  build_docker_image:
    executor: gcp_executor
    steps:
      # Step 1: Check out the source code from the repository.
      - checkout
      # Step 2: Set up CircleCI's remote Docker environment.
      # This is necessary to build Docker images within a Docker-based executor.
      - setup_remote_docker
      # Step 3: Install the Docker client in the primary container.
      - run:
          name: Install Docker Client
          command: |
            echo "Installing Docker client..."
            # The google/cloud-sdk image does not include the Docker CLI.
            # We download a static binary and place it in the path.
            DOCKER_VERSION=20.10.7
            curl -fsSL https://download.docker.com/linux/static/stable/x86_64/docker-${DOCKER_VERSION}.tgz | tar xvz -C /usr/local/bin --strip-components=1 docker/docker
            docker --version
            echo "Docker client installed successfully."
      # Step 4: Authenticate with Google Cloud.
      - run:
          name: Authenticate with GCP
          command: |
            echo "Authenticating with Google Cloud..."
            # Decode the service key from the environment variable and activate the service account.
            echo "$GCLOUD_SERVICE_KEY" | base64 --decode > ${HOME}/gcp-key.json
            gcloud auth activate-service-account --key-file=${HOME}/gcp-key.json
            # Configure Docker to authenticate with Google Artifact Registry.
            gcloud auth configure-docker us-central1-docker.pkg.dev
            echo "Authentication successful."
      # Step 5: Build and push the Docker image.
      - run:
          name: Build and Push Docker Image
          command: |
            # Check if the project ID is set.
            if [ -z "$GOOGLE_PROJECT_ID" ]; then
              echo "ERROR: GOOGLE_PROJECT_ID environment variable is not set."
              exit 1
            fi
            # Define the full image tag.
            IMAGE_TAG="us-central1-docker.pkg.dev/${GOOGLE_PROJECT_ID}/circle-ci-app/circle-ci-app:latest"
            echo "Building and pushing image: ${IMAGE_TAG}"
            # Build the Docker image.
            docker build -t "${IMAGE_TAG}" .
            # Push the Docker image to the registry.
            docker push "${IMAGE_TAG}"
            echo "Image pushed successfully."

  # Job to deploy the application to Google Kubernetes Engine (GKE).
  deploy_to_gke:
    executor: gcp_executor
    steps:
      # Step 1: Check out the source code, which includes the Kubernetes manifests.
      - checkout
      # Step 2: Authenticate with Google Cloud.
      - run:
          name: Authenticate with GCP
          command: |
            echo "Authenticating with Google Cloud..."
            echo "$GCLOUD_SERVICE_KEY" | base64 --decode > ${HOME}/gcp-key.json
            gcloud auth activate-service-account --key-file=${HOME}/gcp-key.json
            echo "Authentication successful."
      # Step 3: Configure kubectl to connect to the GKE cluster.
      - run:
          name: Configure GKE Credentials
          command: |
            echo "Configuring GKE cluster credentials..."
            gcloud container clusters get-credentials "$GKE_CLUSTER" --region "$GOOGLE_COMPUTE_REGION" --project "$GOOGLE_PROJECT_ID"
            echo "GKE configuration complete."
      # Step 4: Apply the Kubernetes deployment manifest.
      - run:
          name: Deploy to GKE
          command: |
            echo "Deploying application to GKE..."
            # This command assumes you have a 'kubernetes-deployment.yaml' file in your repository.
            kubectl apply -f kubernetes-deployment.yaml
            echo "Deployment command executed."

# Define the workflow that orchestrates the jobs.
workflows:
  version: 2
  build_and_deploy_pipeline:
    jobs:
      # The first job in the pipeline is to build the image.
      - build_docker_image
      # The second job, deploy_to_gke, will run only after build_docker_image succeeds.
      - deploy_to_gke:
          requires:
            - build_docker_image
